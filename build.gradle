buildscript {
    repositories {
        maven {
            name = "MinecraftForge"
            url = 'https://files.minecraftforge.net/maven'
        }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.ajoberstar.grgit', name: 'grgit-gradle', 'version': '4.0.2'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.ajoberstar.grgit'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven-publish'

def mod_version = grgit.describe(commit: grgit.head(), longDescr: false, tags: true)
if (mod_version == null) mod_version = "unknown"
version = "${mc_version}-${mod_version}"
group = 'sciwhiz12.basedefense'
archivesBaseName = 'basedefense'

println("Mod version: ${mod_version}")
println('Java: ' + System.getProperty('java.version') + '; JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + '); Arch: ' + System.getProperty('os.arch'))

repositories {
    maven {
        name = 'gigaherz\' maven'
        url = 'https://www.dogforce-games.com/maven/'
    }
}

sourceSets {
    main.resources {
        srcDirs += data.resources.srcDirs
        exclude '.cache/' // Prevents the .cache file from being included in the jars
    }
}

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
    mappings channel: 'snapshot', version: "${mappings_version}"

    runs {
        client {
            workingDirectory file('run/client')

            property 'forge.logging.markers', "${logging_markers}"
            property 'forge.logging.console.level', 'debug'

            mods {
                basedefense {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory file('run/server')

            property 'forge.logging.markers', "${logging_markers}"
            property 'forge.logging.console.level', 'debug'

            mods {
                basedefense {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory file('run/data')

            property 'forge.logging.markers', "${logging_markers}"
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'basedefense', '--all'
            args '--output', sourceSets.data.resources.srcDirs[0].toString()
            args '--existing', sourceSets.main.resources.srcDirs[0].toString()

            ideaModule "${project.name}.data"
            mods {
                basedefense {
                    sources sourceSets.main, sourceSets.data
                }
            }
        }
    }
}

configurations {
    dataImplementation.extendsFrom implementation
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    dataImplementation sourceSets.main.output
    dataCompileClasspath sourceSets.main.compileClasspath
}

def git_timestamp = grgit.head().dateTime.toLocalDateTime().toString() + grgit.head().dateTime.getOffset().toString().replace(':', '')
jar {
    manifest {
        attributes([
                "Specification-Title"   : "basedefense",
                "Specification-Vendor"  : "sciwhiz12",
                "Implementation-Title"  : project.name,
                "Implementation-Version": "${mod_version}",
                "Implementation-Vendor" : "sciwhiz12",
                "Build-Timestamp"       : new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "Git-Commit"            : grgit.head().id,
                "Git-Commit-Timestamp"  : git_timestamp
        ])
    }
    includeEmptyDirs false
}

jar.finalizedBy('reobfJar')
jar.finalizedBy('sourcesJar')

task sourcesJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    classifier "sources"
}

artifacts {
    archives sourcesJar
}

publishing {
    publications {
        rebofJar(MavenPublication) {
            artifactId = archivesBaseName
            artifact jar
        }
        srcJar(MavenPublication) {
            artifactId = archivesBaseName
            artifact sourcesJar
        }
    }
    repositories {
        mavenLocal()
    }
}
